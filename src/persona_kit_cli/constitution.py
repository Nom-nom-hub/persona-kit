#!/usr/bin/env python3
"""
Constitution command module for Persona Kit CLI.

This module handles the /persona-kit.constitution workflow for establishing
project principles and foundational guidelines.
"""

import os
import json
from pathlib import Path
from typing import Optional, Dict, Any

import typer
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.table import Table

console = Console()

app = typer.Typer(
    name="constitution",
    help="Establish project principles and foundational guidelines",
    add_completion=False,
)

class ProjectConstitution:
    """Handles project constitution management."""

    def __init__(self, project_path: Path):
        self.project_path = Path(project_path)
        self.constitution_file = self.project_path / "persona-kit" / "constitution.md"

    def ensure_project_structure(self) -> bool:
        """Ensure the project structure exists."""
        try:
            self.constitution_file.parent.mkdir(parents=True, exist_ok=True)
            return True
        except Exception as e:
            console.print(f"[red]Error creating project structure:[/red] {e}")
            return False

    def load_existing_constitution(self) -> Optional[Dict[str, Any]]:
        """Load existing constitution if available."""
        if not self.constitution_file.exists():
            return None

        try:
            content = self.constitution_file.read_text(encoding='utf-8')
            # Try to extract metadata if present
            if content.startswith('# Persona Kit Constitution'):
                return {"content": content, "exists": True}
        except Exception as e:
            console.print(f"[yellow]Warning: Could not read existing constitution:[/yellow] {e}")

        return None

    def create_constitution_interactive(self) -> bool:
        """Create constitution through interactive prompts."""
        console.print("\n[bold cyan]Persona Kit Constitution Setup[/bold cyan]")
        console.print("This will help you establish the foundational principles for your project.\n")

        # Project basics
        project_name = Prompt.ask("Project name", default=self.project_path.name)
        project_description = Prompt.ask("Project description")
        project_vision = Prompt.ask("Project vision/mission")

        # Core principles
        console.print("\n[bold]Core Principles[/bold]")
        principles = []

        principle_questions = [
            "What are the main goals of this project?",
            "What values should guide development decisions?",
            "What are the non-negotiable requirements?",
            "What success criteria should be used?",
            "What communication standards should be maintained?"
        ]

        for question in principle_questions:
            principle = Prompt.ask(f"\n{question}")
            if principle.strip():
                principles.append(principle)

        # Team roles and responsibilities
        console.print("\n[bold]Team Structure[/bold]")
        team_structure = Prompt.ask("Describe the key roles and responsibilities in your team")

        # Decision making process
        console.print("\n[bold]Decision Making[/bold]")
        decision_process = Prompt.ask("How should major decisions be made in this project?")

        # Quality standards
        console.print("\n[bold]Quality Standards[/bold]")
        quality_standards = Prompt.ask("What quality standards should be maintained?")

        # Generate constitution content
        constitution_content = f"""# Persona Kit Constitution

## Project Overview

**Project Name:** {project_name}
**Description:** {project_description}
**Vision:** {project_vision}

## Core Principles

"""

        for i, principle in enumerate(principles, 1):
            constitution_content += f"{i}. {principle}\n\n"

        constitution_content += f"""## Team Structure

{team_structure}

## Decision Making Process

{decision_process}

## Quality Standards

{quality_standards}

## Communication Guidelines

- All team members should use the established personas for consistent communication
- Decision-making should follow the defined process above
- Quality standards must be maintained throughout development
- Regular reviews should ensure alignment with core principles

## Amendment Process

This constitution can be amended through team consensus, ensuring all voices are heard and decisions align with core principles.

---
*Generated by Persona Kit CLI*
"""

        try:
            self.constitution_file.write_text(constitution_content, encoding='utf-8')
            return True
        except Exception as e:
            console.print(f"[red]Error saving constitution:[/red] {e}")
            return False

    def show_constitution_summary(self) -> None:
        """Display a summary of the current constitution."""
        if not self.constitution_file.exists():
            console.print("[yellow]No constitution file found.[/yellow]")
            return

        try:
            content = self.constitution_file.read_text(encoding='utf-8')

            # Extract sections for summary
            lines = content.split('\n')
            sections = []

            current_section = None
            for line in lines:
                if line.startswith('## '):
                    if current_section:
                        sections.append(current_section)
                    current_section = line[3:].strip()
                elif line.startswith('**') and ':' in line:
                    # Extract key information
                    key_value = line.replace('**', '').split(':', 1)
                    if len(key_value) == 2:
                        sections.append(f"{key_value[0].strip()}: {key_value[1].strip()}")

            if sections:
                table = Table(title="Constitution Summary")
                table.add_column("Section", style="cyan")
                table.add_column("Content", style="white")

                for section in sections[:10]:  # Show first 10 items
                    if ':' in section:
                        key, value = section.split(':', 1)
                        table.add_row(key.strip(), value.strip())
                    else:
                        table.add_row(section, "")

                console.print(table)
                console.print(f"\n[dim]Full constitution: {self.constitution_file}[/dim]")

        except Exception as e:
            console.print(f"[red]Error reading constitution:[/red] {e}")

@app.command()
def create(
    project_path: str = typer.Argument(".", help="Path to the project directory"),
    interactive: bool = typer.Option(True, "--interactive/--non-interactive", help="Use interactive mode"),
):
    """Create a new project constitution."""
    project_path = Path(project_path).resolve()

    if not project_path.exists():
        console.print(f"[red]Error:[/red] Project path does not exist: {project_path}")
        raise typer.Exit(1)

    constitution = ProjectConstitution(project_path)

    if not constitution.ensure_project_structure():
        raise typer.Exit(1)

    # Check if constitution already exists
    existing = constitution.load_existing_constitution()
    if existing:
        console.print("[yellow]Constitution already exists.[/yellow]")
        if not Confirm.ask("Do you want to overwrite it?"):
            console.print("Operation cancelled.")
            return

    if interactive:
        success = constitution.create_constitution_interactive()
        if success:
            console.print("\n[bold green]✓ Constitution created successfully![/bold green]")
            constitution.show_constitution_summary()
        else:
            console.print("\n[red]Failed to create constitution.[/red]")
            raise typer.Exit(1)
    else:
        console.print("[cyan]Non-interactive mode not yet implemented.[/cyan]")
        console.print("Use --interactive flag for now.")
        raise typer.Exit(1)

@app.command()
def show(
    project_path: str = typer.Argument(".", help="Path to the project directory"),
):
    """Display the current project constitution."""
    project_path = Path(project_path).resolve()

    if not project_path.exists():
        console.print(f"[red]Error:[/red] Project path does not exist: {project_path}")
        raise typer.Exit(1)

    constitution = ProjectConstitution(project_path)
    constitution.show_constitution_summary()

    # Show full content if file exists
    if constitution.constitution_file.exists():
        try:
            console.print("\n" + "="*50)
            console.print("[bold]Full Constitution:[/bold]")
            console.print("="*50)
            content = constitution.constitution_file.read_text(encoding='utf-8')
            console.print(content)
        except Exception as e:
            console.print(f"[red]Error reading full constitution:[/red] {e}")

@app.command()
def validate(
    project_path: str = typer.Argument(".", help="Path to the project directory"),
):
    """Validate the current project constitution."""
    project_path = Path(project_path).resolve()

    if not project_path.exists():
        console.print(f"[red]Error:[/red] Project path does not exist: {project_path}")
        raise typer.Exit(1)

    constitution = ProjectConstitution(project_path)

    if not constitution.constitution_file.exists():
        console.print("[red]No constitution file found.[/red]")
        console.print("Use 'persona-kit constitution create' to create one.")
        raise typer.Exit(1)

    console.print("[green]✓ Constitution file exists[/green]")

    # Basic validation checks
    try:
        content = constitution.constitution_file.read_text(encoding='utf-8')

        checks = [
            ("Project Overview section", "## Project Overview" in content),
            ("Core Principles section", "## Core Principles" in content),
            ("Team Structure section", "## Team Structure" in content),
            ("Decision Making section", "## Decision Making" in content),
            ("Quality Standards section", "## Quality Standards" in content),
        ]

        table = Table(title="Constitution Validation")
        table.add_column("Check", style="cyan")
        table.add_column("Status", style="white")

        all_passed = True
        for check_name, passed in checks:
            status = "[green]✓[/green]" if passed else "[red]✗[/red]"
            table.add_row(check_name, status)
            if not passed:
                all_passed = False

        console.print(table)

        if all_passed:
            console.print("\n[bold green]✓ Constitution validation passed![/bold green]")
        else:
            console.print("\n[yellow]Some sections are missing from the constitution.[/yellow]")
            console.print("Consider recreating it with 'persona-kit constitution create'")

    except Exception as e:
        console.print(f"[red]Error validating constitution:[/red] {e}")
        raise typer.Exit(1)

def main():
    """Main entry point for constitution command."""
    app()

if __name__ == "__main__":
    main()